{"version":3,"file":"saveScreen.js","sourceRoot":"","sources":["../../lib/commands/saveScreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { takeBase64Screenshot } from '../methods/screenshots';\nimport { makeCroppedBase64Image } from '../methods/images';\nimport beforeScreenshot from '../helpers/beforeScreenshot';\nimport afterScreenshot from '../helpers/afterScreenshot';\nimport { determineScreenRectangles } from '../methods/rectangles';\nimport { Methods } from '../methods/methods.interface';\nimport { Folders } from '../base.interface';\nimport { SaveScreenOptions } from './screen.interfaces';\nimport { BeforeScreenshotOptions, BeforeScreenshotResult } from '../helpers/beforeScreenshot.interface';\nimport { InstanceData } from '../methods/instanceData.interfaces';\nimport { AfterScreenshotOptions, ScreenshotOutput } from '../helpers/afterScreenshot.interfaces';\nimport { RectanglesOutput, ScreenRectanglesOptions } from '../methods/rectangles.interfaces';\n\n/**\n * Saves an image of the viewport of the screen\n */\nexport default async function saveScreen(\n  methods: Methods,\n  instanceData: InstanceData,\n  folders: Folders,\n  tag: string,\n  saveScreenOptions: SaveScreenOptions,\n): Promise<ScreenshotOutput> {\n  // 1a. Set some variables\n  const { addressBarShadowPadding, addIOSBezelCorners, formatImageName, logLevel, savePerInstance, toolBarShadowPadding } =\n    saveScreenOptions.wic;\n\n  // 1b. Set the method options to the right values\n  const disableCSSAnimation: boolean =\n    'disableCSSAnimation' in saveScreenOptions.method\n      ? saveScreenOptions.method.disableCSSAnimation\n      : saveScreenOptions.wic.disableCSSAnimation;\n  const hideScrollBars: boolean =\n    'hideScrollBars' in saveScreenOptions.method ? saveScreenOptions.method.hideScrollBars : saveScreenOptions.wic.hideScrollBars;\n  const hideElements: HTMLElement[] = saveScreenOptions.method.hideElements || [];\n  const removeElements: HTMLElement[] = saveScreenOptions.method.removeElements || [];\n\n  // 2.  Prepare the beforeScreenshot\n  const beforeOptions: BeforeScreenshotOptions = {\n    instanceData,\n    addressBarShadowPadding,\n    disableCSSAnimation,\n    hideElements,\n    logLevel,\n    noScrollBars: hideScrollBars,\n    removeElements,\n    toolBarShadowPadding,\n  };\n  const enrichedInstanceData: BeforeScreenshotResult = await beforeScreenshot(methods.executor, beforeOptions);\n  const {\n    browserName,\n    browserVersion,\n    deviceName,\n    dimensions: {\n      window: { devicePixelRatio, innerHeight, innerWidth, isLandscape, outerHeight, outerWidth, screenHeight, screenWidth },\n    },\n    isAndroidChromeDriverScreenshot,\n    isAndroidNativeWebScreenshot,\n    isIos,\n    isMobile,\n    isTestInBrowser,\n    logName,\n    name,\n    platformName,\n    platformVersion,\n  } = enrichedInstanceData;\n\n  // 3.  Take the screenshot\n  const base64Image: string = await takeBase64Screenshot(methods.screenShot);\n\n  // Determine the rectangles\n  const screenRectangleOptions: ScreenRectanglesOptions = {\n    devicePixelRatio,\n    innerHeight,\n    innerWidth,\n    isAndroidChromeDriverScreenshot,\n    isAndroidNativeWebScreenshot,\n    isIos,\n    isLandscape,\n  };\n  const rectangles: RectanglesOutput = determineScreenRectangles(base64Image, screenRectangleOptions);\n  // 4.  Make a cropped base64 image\n  const croppedBase64Image: string = await makeCroppedBase64Image({\n    addIOSBezelCorners,\n    base64Image,\n    deviceName,\n    devicePixelRatio,\n    isIos,\n    isLandscape,\n    logLevel,\n    rectangles,\n  });\n\n  // 5.  The after the screenshot methods\n  const afterOptions: AfterScreenshotOptions = {\n    actualFolder: folders.actualFolder,\n    base64Image: croppedBase64Image,\n    disableCSSAnimation,\n    filePath: {\n      browserName,\n      deviceName,\n      isMobile,\n      savePerInstance,\n    },\n    fileName: {\n      browserName,\n      browserVersion,\n      deviceName,\n      devicePixelRatio,\n      formatImageName,\n      isMobile,\n      isTestInBrowser,\n      logName,\n      name,\n      outerHeight,\n      outerWidth,\n      platformName,\n      platformVersion,\n      screenHeight,\n      screenWidth,\n      tag,\n    },\n    hideElements,\n    hideScrollBars,\n    isLandscape,\n    logLevel,\n    platformName: instanceData.platformName,\n    removeElements,\n  };\n\n  // 6.  Return the data\n  return afterScreenshot(methods.executor, afterOptions);\n}\n"]}