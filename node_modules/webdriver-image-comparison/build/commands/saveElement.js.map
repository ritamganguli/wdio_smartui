{"version":3,"file":"saveElement.js","sourceRoot":"","sources":["../../lib/commands/saveElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { takeBase64Screenshot } from '../methods/screenshots';\nimport { makeCroppedBase64Image } from '../methods/images';\nimport beforeScreenshot from '../helpers/beforeScreenshot';\nimport afterScreenshot from '../helpers/afterScreenshot';\nimport { determineElementRectangles } from '../methods/rectangles';\nimport { AfterScreenshotOptions, ScreenshotOutput } from '../helpers/afterScreenshot.interfaces';\nimport { Methods } from '../methods/methods.interface';\nimport { InstanceData } from '../methods/instanceData.interfaces';\nimport { Folders } from '../base.interface';\nimport { SaveElementOptions } from './element.interfaces';\nimport { ElementRectanglesOptions, RectanglesOutput } from '../methods/rectangles.interfaces';\nimport { BeforeScreenshotOptions, BeforeScreenshotResult } from '../helpers/beforeScreenshot.interface';\nimport { DEFAULT_RESIZE_DIMENSIONS } from '../helpers/constants';\nimport { ResizeDimensions } from '../methods/images.interfaces';\nimport scrollElementIntoView from '../clientSideScripts/scrollElementIntoView';\nimport { waitFor } from '../helpers/utils';\nimport scrollToPosition from '../clientSideScripts/scrollToPosition';\n\n/**\n * Saves an image of an element\n */\nexport default async function saveElement(\n  methods: Methods,\n  instanceData: InstanceData,\n  folders: Folders,\n  element: HTMLElement,\n  tag: string,\n  saveElementOptions: SaveElementOptions,\n): Promise<ScreenshotOutput> {\n  // 1a. Set some variables\n  const { addressBarShadowPadding, autoElementScroll, formatImageName, logLevel, savePerInstance, toolBarShadowPadding } =\n    saveElementOptions.wic;\n  const { executor } = methods;\n  // 1b. Set the method options to the right values\n  const disableCSSAnimation: boolean =\n    'disableCSSAnimation' in saveElementOptions.method\n      ? saveElementOptions.method.disableCSSAnimation\n      : saveElementOptions.wic.disableCSSAnimation;\n  const hideScrollBars: boolean =\n    'hideScrollBars' in saveElementOptions.method\n      ? saveElementOptions.method.hideScrollBars\n      : saveElementOptions.wic.hideScrollBars;\n  const resizeDimensions: ResizeDimensions | number = saveElementOptions.method.resizeDimensions || DEFAULT_RESIZE_DIMENSIONS;\n  const hideElements: HTMLElement[] = saveElementOptions.method.hideElements || [];\n  const removeElements: HTMLElement[] = saveElementOptions.method.removeElements || [];\n\n  // 2.  Prepare the beforeScreenshot\n  const beforeOptions: BeforeScreenshotOptions = {\n    instanceData,\n    addressBarShadowPadding,\n    disableCSSAnimation,\n    hideElements,\n    logLevel,\n    noScrollBars: hideScrollBars,\n    removeElements,\n    toolBarShadowPadding,\n  };\n  const enrichedInstanceData: BeforeScreenshotResult = await beforeScreenshot(executor, beforeOptions, true);\n  const {\n    browserName,\n    browserVersion,\n    deviceName,\n    dimensions: {\n      window: { devicePixelRatio, innerHeight, isLandscape, outerHeight, outerWidth, screenHeight, screenWidth },\n    },\n    isAndroid,\n    isAndroidNativeWebScreenshot,\n    isIos,\n    isMobile,\n    isTestInBrowser,\n    logName,\n    name,\n    platformName,\n    platformVersion,\n  } = enrichedInstanceData;\n\n  // Scroll the element into top of the viewport and return the current scroll position\n  let currentPosition: number;\n  if (autoElementScroll) {\n    currentPosition = await executor(scrollElementIntoView, element, addressBarShadowPadding);\n    await waitFor(500);\n  }\n\n  // 3.  Take the screenshot\n  const base64Image: string = await takeBase64Screenshot(methods.screenShot);\n\n  // 4.  Determine the rectangles\n  const elementRectangleOptions: ElementRectanglesOptions = {\n    devicePixelRatio,\n    innerHeight,\n    isAndroidNativeWebScreenshot,\n    isAndroid,\n    isIos,\n    isLandscape,\n  };\n  const rectangles: RectanglesOutput = await determineElementRectangles({\n    executor,\n    base64Image,\n    options: elementRectangleOptions,\n    element,\n  });\n\n  if (autoElementScroll) {\n    // When the screenshot has been taken and the element position has been determined,\n    // we can scroll back to the original position\n    // We don't need to wait for the scroll here because we don't take a screenshot after this\n    await executor(scrollToPosition, currentPosition);\n  }\n\n  // 5.  Make a cropped base64 image with resizeDimensions\n  // @TODO: we have isLandscape here\n  const croppedBase64Image = await makeCroppedBase64Image({\n    addIOSBezelCorners: false,\n    base64Image,\n    deviceName,\n    devicePixelRatio,\n    isIos,\n    isLandscape,\n    logLevel,\n    rectangles,\n    resizeDimensions,\n  });\n\n  // 6.  The after the screenshot methods\n  const afterOptions: AfterScreenshotOptions = {\n    actualFolder: folders.actualFolder,\n    base64Image: croppedBase64Image,\n    disableCSSAnimation,\n    filePath: {\n      browserName,\n      deviceName,\n      isMobile,\n      savePerInstance: savePerInstance,\n    },\n    fileName: {\n      browserName,\n      browserVersion,\n      deviceName,\n      devicePixelRatio,\n      formatImageName,\n      isMobile,\n      isTestInBrowser,\n      logName,\n      name,\n      outerHeight,\n      outerWidth,\n      platformName,\n      platformVersion,\n      screenHeight,\n      screenWidth,\n      tag,\n    },\n    hideElements,\n    hideScrollBars,\n    isLandscape,\n    logLevel,\n    platformName: instanceData.platformName,\n    removeElements,\n  };\n\n  // 7.  Return the data\n  return afterScreenshot(executor, afterOptions);\n}\n"]}