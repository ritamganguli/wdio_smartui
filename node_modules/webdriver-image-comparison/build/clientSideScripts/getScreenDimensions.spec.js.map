{"version":3,"file":"getScreenDimensions.spec.js","sourceRoot":"","sources":["../../lib/clientSideScripts/getScreenDimensions.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,wCAA8C;AAC9C,6DAAwD;AAExD,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,EAAE,CAAC,yCAAyC,EAAE;QAC5C,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,aACxC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,cAAM,OAAA,CAAC;gBACzC,OAAO,EAAE,IAAI;aACd,CAAC,EAFwC,CAExC,CAAC,IACA,oBAAY,EACf,CAAC;QACH,MAAM,CAAC,IAAA,6BAAmB,GAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wFAAwF,EAAE;QAC3F,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACjF,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAChF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,aACxC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,cAAM,OAAA,CAAC;gBACzC,OAAO,EAAE,KAAK;aACf,CAAC,EAFwC,CAExC,CAAC,IACA,oBAAY,EACf,CAAC;QAEH,MAAM,CAAC,IAAA,6BAAmB,GAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE;QACxE,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,iBAAiB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACpE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,aACxC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,cAAM,OAAA,CAAC;gBACzC,OAAO,EAAE,KAAK;aACf,CAAC,EAFwC,CAExC,CAAC,IACA,oBAAY,EACf,CAAC;QAEH,MAAM,CAAC,IAAA,6BAAmB,GAAE,CAAC,CAAC,eAAe,EAAE,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { CONFIGURABLE } from '../mocks/mocks';\nimport getScreenDimensions from './getScreenDimensions';\n\ndescribe('getScreenDimensions', () => {\n  it('should get the needed screen dimensions', () => {\n    Object.defineProperty(window, 'matchMedia', {\n      value: jest.fn().mockImplementation(() => ({\n        matches: true,\n      })),\n      ...CONFIGURABLE,\n    });\n    expect(getScreenDimensions()).toMatchSnapshot();\n  });\n\n  it('should get the needed screen dimensions if the outerHeight and outerWidth are set to 0', () => {\n    Object.defineProperty(window, 'outerHeight', { value: 0 });\n    Object.defineProperty(window, 'outerWidth', { value: 0 });\n    Object.defineProperty(document.documentElement, 'clientHeight', { value: 1234 });\n    Object.defineProperty(document.documentElement, 'clientWidth', { value: 4321 }); // @ts-ignore\n    Object.defineProperty(window, 'matchMedia', {\n      value: jest.fn().mockImplementation(() => ({\n        matches: false,\n      })),\n      ...CONFIGURABLE,\n    });\n\n    expect(getScreenDimensions()).toMatchSnapshot();\n  });\n\n  it('should return zeroed dimensions if the document attributes are null', () => {\n    Object.defineProperty(document, 'body', { value: null });\n    Object.defineProperty(document, 'documentElement', { value: null });\n    Object.defineProperty(window, 'matchMedia', {\n      value: jest.fn().mockImplementation(() => ({\n        matches: false,\n      })),\n      ...CONFIGURABLE,\n    });\n\n    expect(getScreenDimensions()).toMatchSnapshot();\n  });\n});\n"]}