"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var mocks_1 = require("../mocks/mocks");
var getIosStatusAddressToolBarOffsets_1 = require("./getIosStatusAddressToolBarOffsets");
var constants_1 = require("../helpers/constants");
describe('getIosStatusAddressToolBarOffsets', function () {
    it('should get the correct status, address and toolbar height for a default iPhone with iOS 14 in Portrait mode', function () {
        setEnvironment('IOS', 14, 'IPHONE');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for a default iPhone with iOS 14 in landscape mode', function () {
        setEnvironment('IOS', 14, 'IPHONE');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, true)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for a default iPhone with iOS 15 in portrait mode', function () {
        setEnvironment('IOS', 15, 'IPHONE_X');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for a default iPhone with iOS 15 in landscape mode', function () {
        setEnvironment('IOS', 15, 'IPHONE_X');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, true)).toMatchSnapshot();
    });
    it('should get the correct status bar height for an iPhone 11 with iOS 13 to validate the iPhone 11 hack', function () {
        setEnvironment('IOS', 13, 'IPHONE_11');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status bar height for an iPhone 11 with iOS 13 to validate the iPhone 11 hack in landscape mode', function () {
        setEnvironment('IOS', 13, 'IPHONE_11');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, true)).toMatchSnapshot();
    });
    it('should get the correct status bar height for an iPhone 11 with iOS 15', function () {
        setEnvironment('IOS', 15, 'IPHONE_11');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for an iPhone with extreme not known dimensions', function () {
        setEnvironment('IOS', 15, 'IPHONE_HEIGHT');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for an iPad', function () {
        setEnvironment('IOS', 15, 'IPAD');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for an iPad with big sizes', function () {
        setEnvironment('IOS', 15, 'IPAD_BIG_SIZE');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, false)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for an iPad in landscape mode', function () {
        setEnvironment('IOS', 15, 'IPAD_LANDSCAPE');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, true)).toMatchSnapshot();
    });
    it('should get the correct status, address and toolbar height for the iPad Pro 12.9 2017 hack in landscape mode', function () {
        setEnvironment('IOS', 15, 'IPAD_PRO_LANDSCAPE');
        expect((0, getIosStatusAddressToolBarOffsets_1.default)(constants_1.IOS_OFFSETS, true)).toMatchSnapshot();
    });
});
function setEnvironment(os, version, deviceType) {
    Object.defineProperty(navigator, 'appVersion', __assign({ value: mocks_1.NAVIGATOR_APP_VERSIONS[os][version] }, mocks_1.CONFIGURABLE));
    Object.defineProperty(window.screen, 'width', __assign({ value: mocks_1.IOS_DEVICES[deviceType].width }, mocks_1.CONFIGURABLE));
    Object.defineProperty(global.document, 'documentElement', __assign({ value: { scrollWidth: mocks_1.IOS_DEVICES[deviceType].scrollWidth } }, mocks_1.CONFIGURABLE));
    Object.defineProperty(window.screen, 'height', __assign({ value: mocks_1.IOS_DEVICES[deviceType].height }, mocks_1.CONFIGURABLE));
    Object.defineProperty(window, 'innerWidth', __assign({ value: mocks_1.IOS_DEVICES[deviceType].innerWidth }, mocks_1.CONFIGURABLE));
    Object.defineProperty(window, 'innerHeight', __assign({ value: mocks_1.IOS_DEVICES[deviceType].innerHeight }, mocks_1.CONFIGURABLE));
}
//# sourceMappingURL=getIosStatusAddressToolBarOffsets.spec.js.map