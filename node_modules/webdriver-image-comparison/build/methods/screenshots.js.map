{"version":3,"file":"screenshots.js","sourceRoot":"","sources":["../../lib/methods/screenshots.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0EAAqE;AACrE,wFAAmF;AACnF,oHAA+G;AAC/G,4GAAuG;AACvG,kDAAoE;AACpE,0CAAgF;AAShF,8EAAyE;AACzE,sEAAiE;AACjE,kEAAwD;AAKxD,SAAsB,gCAAgC,CACpD,cAA8B,EAC9B,QAAkB,EAClB,OAAsC;;;;;;oBAGpC,uBAAuB,GAerB,OAAO,wBAfc,EACvB,gBAAgB,GAcd,OAAO,iBAdO,EAChB,qBAAqB,GAanB,OAAO,sBAbY,EACrB,oBAAoB,GAYlB,OAAO,qBAZW,EACpB,WAAW,GAWT,OAAO,YAXE,EACX,SAAS,GAUP,OAAO,UAVA,EACT,4BAA4B,GAS1B,OAAO,6BATmB,EAC5B,+BAA+B,GAQ7B,OAAO,gCARsB,EAC/B,WAAW,GAOT,OAAO,YAPE,EACX,KAAK,GAMH,OAAO,MANJ,EACL,WAAW,GAKT,OAAO,YALE,EACX,QAAQ,GAIN,OAAO,SAJD,EACR,YAAY,GAGV,OAAO,aAHG,EACZ,WAAW,GAET,OAAO,YAFE,EACX,oBAAoB,GAClB,OAAO,qBADW,CACV;oBACN,cAAc,GAAG;wBACrB,gBAAgB,kBAAA;wBAChB,qBAAqB,uBAAA;wBACrB,oBAAoB,sBAAA;wBACpB,WAAW,aAAA;wBACX,QAAQ,UAAA;qBACT,CAAC;oBACI,mBAAmB,yBACpB,cAAc,KACjB,uBAAuB,yBAAA,EACvB,YAAY,cAAA,EACZ,WAAW,aAAA,EACX,oBAAoB,sBAAA,GACrB,CAAC;yBAEE,CAAA,SAAS,IAAI,4BAA4B,CAAA,EAAzC,cAAyC;oBASzC,WAAM,QAAQ,CAAC,+CAAqC,EAAE,2BAAe,EAAE,EAAE,WAAW,aAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAPhG,KAM2B,CAC/B,SAAoG,CACrG,EAPC,QAAQ,cAAA,EACR,gCAAY,EACZ,8BAAW,EACO,YAAY,mBAAA,EACF,sBAAsB,6BAAA;oBAK9C,0BAA0B,yBAC3B,mBAAmB,KACtB,WAAW,aAAA,EACX,QAAQ,UAAA,EACR,YAAY,gBAAA,EACZ,WAAW,eAAA,EACX,YAAY,cAAA,EACZ,sBAAsB,wBAAA,GACvB,CAAC;oBAEF,WAAO,sCAAsC,CAAC,cAAc,EAAE,QAAQ,EAAE,0BAA0B,CAAC,EAAC;;yBAC3F,CAAA,SAAS,IAAI,+BAA+B,CAAA,EAA5C,cAA4C;oBAC/C,mBAAmB,GAAG,EAAE,gBAAgB,kBAAA,EAAE,qBAAqB,uBAAA,EAAE,oBAAoB,sBAAA,EAAE,WAAW,aAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;oBAGrH,WAAO,6CAA6C,CAAC,cAAc,EAAE,QAAQ,EAAE,mBAAmB,CAAC,EAAC;;yBAC3F,KAAK,EAAL,cAAK;oBASmB,WAAM,QAAQ,CAAC,2CAAiC,EAAE,uBAAW,EAAE,WAAW,CAAC,EAAA;;oBAPtG,KAO2B,SAA2E,EAN1G,QAAQ,cAAA,EACR,gCAAY,EACZ,8BAAW,EACO,YAAY,mBAAA,EACF,sBAAsB,6BAAA,EACpC,WAAW,eAAA;oBAErB,sBAAsB,yBACvB,mBAAmB,KACtB,WAAW,aAAA,EACX,WAAW,aAAA,EACX,QAAQ,UAAA,EACR,YAAY,gBAAA,EACZ,WAAW,eAAA,EACX,YAAY,cAAA,EACZ,sBAAsB,wBAAA,GACvB,CAAC;oBAEF,WAAO,sCAAsC,CAAC,cAAc,EAAE,QAAQ,EAAE,sBAAsB,CAAC,EAAC;wBAIlG,WAAO,iCAAiC,CAAC,cAAc,EAAE,QAAQ,EAAE,cAAc,CAAC,EAAC;;;;CACpF;AA3FD,4EA2FC;AAKD,SAAsB,sCAAsC,CAC1D,cAA8B,EAC9B,QAAkB,EAClB,OAA8C;;;;;;oBAExC,mBAAmB,GAAG,EAAE,CAAC;oBAK7B,uBAAuB,GAarB,OAAO,wBAbc,EACvB,gBAAgB,GAYd,OAAO,iBAZO,EAChB,qBAAqB,GAWnB,OAAO,sBAXY,EACrB,oBAAoB,GAUlB,OAAO,qBAVW,EACpB,WAAW,GAST,OAAO,YATE,EACX,WAAW,GAQT,OAAO,YARE,EACX,QAAQ,GAON,OAAO,SAPD,EACR,WAAW,GAMT,OAAO,YANE,EACX,QAAQ,GAKN,OAAO,SALD,EACR,sBAAsB,GAIpB,OAAO,uBAJa,EACtB,YAAY,GAGV,OAAO,aAHG,EACZ,YAAY,GAEV,OAAO,aAFG,EACZ,oBAAoB,GAClB,OAAO,qBADW,CACV;oBACN,iBAAiB,GACrB,WAAW;wBACX,uBAAuB;wBACvB,oBAAoB;wBAIpB,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAGlG,oBAAoB,GAAG,EAAE,CAAC;oBAI5B,SAAS,GAAG,KAAK,CAAC;oBAEb,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAA;oBAExC,YAAU,iBAAiB,GAAG,CAAC,CAAC;oBACtC,WAAM,QAAQ,CAAC,0BAAgB,EAAE,SAAO,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;oBAG1C,WAAM,QAAQ,CAAC,wBAAc,EAAE,IAAI,CAAC,EAAA;;oBAApC,SAAoC,CAAC;oBAGrC,WAAM,IAAA,eAAO,EAAC,qBAAqB,CAAC,EAAA;;oBAApC,SAAoC,CAAC;yBAGjC,CAAA,CAAC,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA1C,cAA0C;;;;oBAE1C,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAA;;oBAApF,SAAoF,CAAC;;;;oBAErF,qBAAqB,CAAC,GAAC,EAAE,QAAQ,CAAC,CAAC;;wBAKpB,WAAM,oBAAoB,CAAC,cAAc,CAAC,EAAA;;oBAAvD,UAAU,GAAG,SAA0C;oBAC7D,oBAAoB,GAAG,IAAA,yBAAiB,EAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,MAAM,GAAG,YAAY,CAAC;oBAC7F,mBAAmB,GAAG,IAAA,yBAAiB,EAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;oBAC3F,SAAS,GAAG,WAAW,IAAI,oBAAoB,GAAG,mBAAmB,CAAC;oBAGvD,WAAM,QAAQ,CAAC,iCAAuB,CAAC,EAAA;;oBAAtD,YAAY,GAAG,SAAuC,CAAC;oBACvD,IAAI,SAAO,GAAG,iBAAiB,GAAG,YAAY,EAAE;wBAC9C,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;qBACxD;oBAIK,WAAW,GAAG,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,SAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC;oBAI7F,cAAc,GAClB,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,GAAG,uBAAuB,CAAC;oBAGzH,mBAAmB,CAAC,IAAI,uBACnB,IAAA,wBAAgB,EACjB;wBACE,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,mBAAmB;wBACnE,eAAe,EAAE,SAAO;wBACxB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,mBAAmB;wBAClE,cAAc,EAAE,YAAY;wBAC5B,cAAc,EAAE,cAAc;qBAC/B,EACD,gBAAgB,CACjB,KACD,UAAU,YAAA,IACV,CAAC;oBAGH,WAAM,QAAQ,CAAC,wBAAc,EAAE,KAAK,CAAC,EAAA;;oBAArC,SAAqC,CAAC;;;oBA1DU,CAAC,EAAE,CAAA;;;yBA8DjD,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,eAA+B;;;;oBAE/B,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,EAAA;;oBAArF,SAAqF,CAAC;;;;oBAEtF,qBAAqB,CAAC,GAAC,EAAE,QAAQ,CAAC,CAAC;;yBAIvC,iCACK,IAAA,wBAAgB,EACjB;wBACE,cAAc,EAAE,YAAY,GAAG,uBAAuB,GAAG,oBAAoB;wBAC7E,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,mBAAmB;qBACtE,EACD,gBAAgB,CACjB,KACD,IAAI,EAAE,mBAAmB,KACzB;;;;CACH;AAxHD,wFAwHC;AAKD,SAAsB,6CAA6C,CACjE,cAA8B,EAC9B,QAAkB,EAClB,OAAkC;;;;;;oBAE5B,mBAAmB,GAAG,EAAE,CAAC;oBACvB,gBAAgB,GAAyE,OAAO,iBAAhF,EAAE,qBAAqB,GAAkD,OAAO,sBAAzD,EAAE,oBAAoB,GAA4B,OAAO,qBAAnC,EAAE,WAAW,GAAe,OAAO,YAAtB,EAAE,QAAQ,GAAK,OAAO,SAAZ,CAAa;oBAGnG,oBAAoB,GAAG,EAAE,CAAC;oBAIvB,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAA;oBAExC,YAAU,WAAW,GAAG,CAAC,CAAC;oBAChC,WAAM,QAAQ,CAAC,0BAAgB,EAAE,SAAO,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;oBAG1C,WAAM,QAAQ,CAAC,wBAAc,EAAE,IAAI,CAAC,EAAA;;oBAApC,SAAoC,CAAC;oBAGrC,WAAM,IAAA,eAAO,EAAC,qBAAqB,CAAC,EAAA;;oBAApC,SAAoC,CAAC;yBAGjC,CAAA,CAAC,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA1C,cAA0C;;;;oBAE1C,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAA;;oBAApF,SAAoF,CAAC;;;;oBAErF,qBAAqB,CAAC,GAAC,EAAE,QAAQ,CAAC,CAAC;;wBAKpB,WAAM,oBAAoB,CAAC,cAAc,CAAC,EAAA;;oBAAvD,UAAU,GAAG,SAA0C;oBAC7D,cAAc,GAAG,IAAA,yBAAiB,EAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;oBAGlD,WAAM,QAAQ,CAAC,iCAAuB,CAAC,EAAA;;oBAAtD,YAAY,GAAG,SAAuC,CAAC;oBACvD,IAAI,SAAO,GAAG,WAAW,GAAG,YAAY,EAAE;wBACxC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;qBACxD;oBAIK,WAAW,GACf,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,WAAW,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC;oBAEtG,cAAc,GAAG,oBAAoB,CAAC,MAAM,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAG9H,mBAAmB,CAAC,IAAI,uBACnB,IAAA,wBAAgB,EACjB;wBACE,WAAW,EAAE,cAAc,CAAC,KAAK;wBACjC,eAAe,EAAE,SAAO;wBACxB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,cAAc,CAAC,KAAK;wBAChC,cAAc,EAAE,CAAC;wBACjB,cAAc,EAAE,cAAc;qBAC/B,EACD,gBAAgB,CACjB,KACD,UAAU,YAAA,IACV,CAAC;oBAGH,WAAM,QAAQ,CAAC,wBAAc,EAAE,KAAK,CAAC,EAAA;;oBAArC,SAAqC,CAAC;;;oBAtDU,CAAC,EAAE,CAAA;;;yBA0DjD,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,eAA+B;;;;oBAE/B,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,EAAA;;oBAArF,SAAqF,CAAC;;;;oBAEtF,qBAAqB,CAAC,GAAC,EAAE,QAAQ,CAAC,CAAC;;yBAIvC,iCACK,IAAA,wBAAgB,EACjB;wBACE,cAAc,EAAE,YAAY;wBAC5B,aAAa,EAAE,cAAc,CAAC,KAAK;qBACpC,EACD,gBAAgB,CACjB,KACD,IAAI,EAAE,mBAAmB,KACzB;;;;CACH;AAzFD,sGAyFC;AAKD,SAAsB,iCAAiC,CACrD,cAA8B,EAC9B,QAAkB,EAClB,OAAkC;;;;;;oBAE5B,mBAAmB,GAAG,EAAE,CAAC;oBACvB,gBAAgB,GAAyE,OAAO,iBAAhF,EAAE,qBAAqB,GAAkD,OAAO,sBAAzD,EAAE,oBAAoB,GAA4B,OAAO,qBAAnC,EAAE,WAAW,GAAe,OAAO,YAAtB,EAAE,QAAQ,GAAK,OAAO,SAAZ,CAAa;oBACrG,iBAAiB,GAAG,WAAW,CAAC;oBAG9B,oBAAoB,GAAG,EAAE,CAAC;oBAIvB,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAA;oBAExC,YAAU,iBAAiB,GAAG,CAAC,CAAC;oBACtC,WAAM,QAAQ,CAAC,0BAAgB,EAAE,SAAO,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;oBAG1C,WAAM,IAAA,eAAO,EAAC,qBAAqB,CAAC,EAAA;;oBAApC,SAAoC,CAAC;yBAGjC,CAAA,CAAC,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA1C,cAA0C;;;;oBAE1C,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAA;;oBAApF,SAAoF,CAAC;;;;oBAErF,qBAAqB,CAAC,GAAC,EAAE,QAAQ,CAAC,CAAC;;wBAKpB,WAAM,oBAAoB,CAAC,cAAc,CAAC,EAAA;;oBAAvD,UAAU,GAAG,SAA0C;oBAC7D,cAAc,GAAG,IAAA,yBAAiB,EAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;oBAIjE,IAAI,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,MAAM,KAAK,iBAAiB,EAAE;wBAC1D,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,iBAAiB,EAAE;4BAC3D,iBAAiB,GAAG,cAAc,CAAC,MAAM,CAAC;yBAC3C;qBAGF;oBAGc,WAAM,QAAQ,CAAC,iCAAuB,CAAC,EAAA;;oBAAtD,YAAY,GAAG,SAAuC,CAAC;oBAEvD,IAAI,SAAO,GAAG,iBAAiB,GAAG,YAAY,IAAI,cAAc,CAAC,MAAM,KAAK,iBAAiB,EAAE;wBAC7F,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;qBACxD;oBAKK,WAAW,GACf,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,iBAAiB,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC;oBAEtH,cAAc,GAClB,oBAAoB,CAAC,MAAM,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAG/G,mBAAmB,CAAC,IAAI,uBACnB,IAAA,wBAAgB,EACjB;wBACE,WAAW,EAAE,cAAc,CAAC,KAAK;wBACjC,eAAe,EAAE,SAAO;wBACxB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,cAAc,CAAC,KAAK;wBAChC,cAAc,EAAE,CAAC;wBACjB,cAAc,EAAE,cAAc;qBAC/B,EACD,gBAAgB,CACjB,KACD,UAAU,YAAA,IACV,CAAC;;;oBA7D6C,CAAC,EAAE,CAAA;;;yBAiEjD,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,eAA+B;;;;oBAE/B,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,EAAA;;oBAArF,SAAqF,CAAC;;;;oBAEtF,qBAAqB,CAAC,GAAC,EAAE,QAAQ,CAAC,CAAC;;yBAIvC,iCACK,IAAA,wBAAgB,EACjB;wBACE,cAAc,EAAE,YAAY;wBAC5B,aAAa,EAAE,cAAc,CAAC,KAAK;qBACpC,EACD,gBAAgB,CACjB,KACD,IAAI,EAAE,mBAAmB,KACzB;;;;CACH;AAjGD,8EAiGC;AAKD,SAAsB,oBAAoB,CAAC,cAA8B;;;YACvE,WAAO,cAAc,EAAE,EAAC;;;CACzB;AAFD,oDAEC;AAOD,SAAS,qBAAqB,CAAC,KAAU,EAAE,QAAkB;IAC3D,IAAI,QAAQ,KAAK,4BAAQ,CAAC,KAAK,IAAI,QAAQ,KAAK,4BAAQ,CAAC,IAAI,EAAE;QAC7D,OAAO,CAAC,GAAG,CACT,mBAAmB,EACnB,yOAKI,KAAK,oIAGd,CACI,CAAC;KACH;AACH,CAAC","sourcesContent":["import scrollToPosition from '../clientSideScripts/scrollToPosition';\nimport getDocumentScrollHeight from '../clientSideScripts/getDocumentScrollHeight';\nimport getAndroidStatusAddressToolBarOffsets from '../clientSideScripts/getAndroidStatusAddressToolBarOffsets';\nimport getIosStatusAddressToolBarOffsets from '../clientSideScripts/getIosStatusAddressToolBarOffsets';\nimport { ANDROID_OFFSETS, IOS_OFFSETS } from '../helpers/constants';\nimport { calculateDprData, getScreenshotSize, waitFor } from '../helpers/utils';\nimport { Executor, TakeScreenShot } from './methods.interface';\nimport {\n  FullPageScreenshotOptions,\n  FullPageScreenshotNativeMobileOptions,\n  FullPageScreenshotDataOptions,\n  FullPageScreenshotsData,\n} from './screenshots.interfaces';\nimport { StatusAddressToolBarOffsets } from '../clientSideScripts/statusAddressToolBarOffsets.interfaces';\nimport hideRemoveElements from '../clientSideScripts/hideRemoveElements';\nimport hideScrollBars from '../clientSideScripts/hideScrollbars';\nimport { LogLevel } from '../helpers/options.interface';\n\n/**\n * Take a full page screenshots for desktop / iOS / Android\n */\nexport async function getBase64FullPageScreenshotsData(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotDataOptions,\n): Promise<FullPageScreenshotsData> {\n  const {\n    addressBarShadowPadding,\n    devicePixelRatio,\n    fullPageScrollTimeout,\n    hideAfterFirstScroll,\n    innerHeight,\n    isAndroid,\n    isAndroidNativeWebScreenshot,\n    isAndroidChromeDriverScreenshot,\n    isHybridApp,\n    isIos,\n    isLandscape,\n    logLevel,\n    screenHeight,\n    screenWidth,\n    toolBarShadowPadding,\n  } = options;\n  const desktopOptions = {\n    devicePixelRatio,\n    fullPageScrollTimeout,\n    hideAfterFirstScroll,\n    innerHeight,\n    logLevel,\n  };\n  const nativeMobileOptions = {\n    ...desktopOptions,\n    addressBarShadowPadding,\n    screenHeight,\n    screenWidth,\n    toolBarShadowPadding,\n  };\n\n  if (isAndroid && isAndroidNativeWebScreenshot) {\n    // Create a fullpage screenshot for Android when native screenshot (so including status, address and toolbar) is created\n    const {\n      safeArea,\n      screenHeight,\n      screenWidth,\n      sideBar: { width: sideBarWidth },\n      statusAddressBar: { height: statusAddressBarHeight },\n    } = <StatusAddressToolBarOffsets>(\n      await executor(getAndroidStatusAddressToolBarOffsets, ANDROID_OFFSETS, { isHybridApp, isLandscape })\n    );\n\n    const androidNativeMobileOptions = {\n      ...nativeMobileOptions,\n      isLandscape,\n      safeArea,\n      screenHeight,\n      screenWidth,\n      sideBarWidth,\n      statusAddressBarHeight,\n    };\n\n    return getFullPageScreenshotsDataNativeMobile(takeScreenshot, executor, androidNativeMobileOptions);\n  } else if (isAndroid && isAndroidChromeDriverScreenshot) {\n    const chromeDriverOptions = { devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight, logLevel };\n\n    // Create a fullpage screenshot for Android when the ChromeDriver provides the screenshots\n    return getFullPageScreenshotsDataAndroidChromeDriver(takeScreenshot, executor, chromeDriverOptions);\n  } else if (isIos) {\n    // Create a fullpage screenshot for iOS. iOS screenshots will hold the status, address and toolbar so they need to be removed\n    const {\n      safeArea,\n      screenHeight,\n      screenWidth,\n      sideBar: { width: sideBarWidth },\n      statusAddressBar: { height: statusAddressBarHeight },\n      toolBar: { y: iosHomeBarY },\n    } = <StatusAddressToolBarOffsets>await executor(getIosStatusAddressToolBarOffsets, IOS_OFFSETS, isLandscape);\n    const iosNativeMobileOptions = {\n      ...nativeMobileOptions,\n      iosHomeBarY,\n      isLandscape,\n      safeArea,\n      screenHeight,\n      screenWidth,\n      sideBarWidth,\n      statusAddressBarHeight,\n    };\n\n    return getFullPageScreenshotsDataNativeMobile(takeScreenshot, executor, iosNativeMobileOptions);\n  }\n\n  // Create a fullpage screenshot for all desktops\n  return getFullPageScreenshotsDataDesktop(takeScreenshot, executor, desktopOptions);\n}\n\n/**\n * Take a full page screenshots for native mobile\n */\nexport async function getFullPageScreenshotsDataNativeMobile(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotNativeMobileOptions,\n): Promise<FullPageScreenshotsData> {\n  const viewportScreenshots = [];\n\n  // The addressBarShadowPadding and toolBarShadowPadding is used because the viewport has a shadow on the address and the tool bar\n  // so the cutout of the viewport needs to be a little bit smaller\n  const {\n    addressBarShadowPadding,\n    devicePixelRatio,\n    fullPageScrollTimeout,\n    hideAfterFirstScroll,\n    innerHeight,\n    iosHomeBarY,\n    safeArea,\n    isLandscape,\n    logLevel,\n    statusAddressBarHeight,\n    screenHeight,\n    sideBarWidth,\n    toolBarShadowPadding,\n  } = options;\n  const iosViewportHeight =\n    innerHeight -\n    addressBarShadowPadding -\n    toolBarShadowPadding -\n    // This is for iOS devices in landscape mode with a notch. They have a home bar at the bottom of the screen\n    // which is not part of the bottom toolbar. This home bar is not part of the viewport and needs to be subtracted\n    // 1133 is for iPads with a home bar, see the constants\n    (iosHomeBarY && ((isLandscape && safeArea) || screenHeight >= 1133) ? screenHeight - iosHomeBarY : 0);\n\n  // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n  const amountOfScrollsArray = [];\n  let scrollHeight: number;\n  let screenshotSizeHeight: number;\n  let screenshotSizeWidth: number;\n  let isRotated = false;\n\n  for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n    // Determine and start scrolling\n    const scrollY = iosViewportHeight * i;\n    await executor(scrollToPosition, scrollY);\n\n    // Hide scrollbars before taking a screenshot, we don't want them, on the screenshot\n    await executor(hideScrollBars, true);\n\n    // Simply wait the amount of time specified for lazy-loading\n    await waitFor(fullPageScrollTimeout);\n\n    // Elements that need to be hidden after the first scroll for a fullpage scroll\n    if (i === 1 && hideAfterFirstScroll.length > 0) {\n      try {\n        await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, true);\n      } catch (e) {\n        logHiddenRemovedError(e, logLevel);\n      }\n    }\n\n    // Take the screenshot and get the width\n    const screenshot = await takeBase64Screenshot(takeScreenshot);\n    screenshotSizeHeight = getScreenshotSize(screenshot, devicePixelRatio).height - sideBarWidth;\n    screenshotSizeWidth = getScreenshotSize(screenshot, devicePixelRatio).width - sideBarWidth;\n    isRotated = isLandscape && screenshotSizeHeight > screenshotSizeWidth;\n\n    // Determine scroll height and check if we need to scroll again\n    scrollHeight = await executor(getDocumentScrollHeight);\n    if (scrollY + iosViewportHeight < scrollHeight) {\n      amountOfScrollsArray.push(amountOfScrollsArray.length);\n    }\n    // There is no else\n\n    // The height of the image of the last 1 could be different\n    const imageHeight = amountOfScrollsArray.length === i ? scrollHeight - scrollY : iosViewportHeight;\n\n    // The starting position for cropping could be different for the last image\n    // The cropping always needs to start at status and address bar height and the address bar shadow padding\n    const imageYPosition =\n      (amountOfScrollsArray.length === i ? innerHeight - imageHeight : 0) + statusAddressBarHeight + addressBarShadowPadding;\n\n    // Store all the screenshot data in the screenshot object\n    viewportScreenshots.push({\n      ...calculateDprData(\n        {\n          canvasWidth: isRotated ? screenshotSizeHeight : screenshotSizeWidth,\n          canvasYPosition: scrollY,\n          imageHeight: imageHeight,\n          imageWidth: isRotated ? screenshotSizeHeight : screenshotSizeWidth,\n          imageXPosition: sideBarWidth,\n          imageYPosition: imageYPosition,\n        },\n        devicePixelRatio,\n      ),\n      screenshot,\n    });\n\n    // Show scrollbars again\n    await executor(hideScrollBars, false);\n  }\n\n  // Put back the hidden elements to visible\n  if (hideAfterFirstScroll.length > 0) {\n    try {\n      await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, false);\n    } catch (e) {\n      logHiddenRemovedError(e, logLevel);\n    }\n  }\n\n  return {\n    ...calculateDprData(\n      {\n        fullPageHeight: scrollHeight - addressBarShadowPadding - toolBarShadowPadding,\n        fullPageWidth: isRotated ? screenshotSizeHeight : screenshotSizeWidth,\n      },\n      devicePixelRatio,\n    ),\n    data: viewportScreenshots,\n  };\n}\n\n/**\n * Take a full page screenshot for Android with Chromedriver\n */\nexport async function getFullPageScreenshotsDataAndroidChromeDriver(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotOptions,\n): Promise<FullPageScreenshotsData> {\n  const viewportScreenshots = [];\n  const { devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight, logLevel } = options;\n\n  // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n  const amountOfScrollsArray = [];\n  let scrollHeight: number;\n  let screenshotSize;\n\n  for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n    // Determine and start scrolling\n    const scrollY = innerHeight * i;\n    await executor(scrollToPosition, scrollY);\n\n    // Hide scrollbars before taking a screenshot, we don't want them, on the screenshot\n    await executor(hideScrollBars, true);\n\n    // Simply wait the amount of time specified for lazy-loading\n    await waitFor(fullPageScrollTimeout);\n\n    // Elements that need to be hidden after the first scroll for a fullpage scroll\n    if (i === 1 && hideAfterFirstScroll.length > 0) {\n      try {\n        await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, true);\n      } catch (e) {\n        logHiddenRemovedError(e, logLevel);\n      }\n    }\n\n    // Take the screenshot\n    const screenshot = await takeBase64Screenshot(takeScreenshot);\n    screenshotSize = getScreenshotSize(screenshot, devicePixelRatio);\n\n    // Determine scroll height and check if we need to scroll again\n    scrollHeight = await executor(getDocumentScrollHeight);\n    if (scrollY + innerHeight < scrollHeight) {\n      amountOfScrollsArray.push(amountOfScrollsArray.length);\n    }\n    // There is no else\n\n    // The height of the image of the last 1 could be different\n    const imageHeight: number =\n      amountOfScrollsArray.length === i ? scrollHeight - innerHeight * viewportScreenshots.length : innerHeight;\n    // The starting position for cropping could be different for the last image (0 means no cropping)\n    const imageYPosition = amountOfScrollsArray.length === i && amountOfScrollsArray.length !== 0 ? innerHeight - imageHeight : 0;\n\n    // Store all the screenshot data in the screenshot object\n    viewportScreenshots.push({\n      ...calculateDprData(\n        {\n          canvasWidth: screenshotSize.width,\n          canvasYPosition: scrollY,\n          imageHeight: imageHeight,\n          imageWidth: screenshotSize.width,\n          imageXPosition: 0,\n          imageYPosition: imageYPosition,\n        },\n        devicePixelRatio,\n      ),\n      screenshot,\n    });\n\n    // Show the scrollbars again\n    await executor(hideScrollBars, false);\n  }\n\n  // Put back the hidden elements to visible\n  if (hideAfterFirstScroll.length > 0) {\n    try {\n      await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, false);\n    } catch (e) {\n      logHiddenRemovedError(e, logLevel);\n    }\n  }\n\n  return {\n    ...calculateDprData(\n      {\n        fullPageHeight: scrollHeight,\n        fullPageWidth: screenshotSize.width,\n      },\n      devicePixelRatio,\n    ),\n    data: viewportScreenshots,\n  };\n}\n\n/**\n * Take a full page screenshots\n */\nexport async function getFullPageScreenshotsDataDesktop(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotOptions,\n): Promise<FullPageScreenshotsData> {\n  const viewportScreenshots = [];\n  const { devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight, logLevel } = options;\n  let actualInnerHeight = innerHeight;\n\n  // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n  const amountOfScrollsArray = [];\n  let scrollHeight: number;\n  let screenshotSize;\n\n  for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n    // Determine and start scrolling\n    const scrollY = actualInnerHeight * i;\n    await executor(scrollToPosition, scrollY);\n\n    // Simply wait the amount of time specified for lazy-loading\n    await waitFor(fullPageScrollTimeout);\n\n    // Elements that need to be hidden after the first scroll for a fullpage scroll\n    if (i === 1 && hideAfterFirstScroll.length > 0) {\n      try {\n        await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, true);\n      } catch (e) {\n        logHiddenRemovedError(e, logLevel);\n      }\n    }\n\n    // Take the screenshot\n    const screenshot = await takeBase64Screenshot(takeScreenshot);\n    screenshotSize = getScreenshotSize(screenshot, devicePixelRatio);\n\n    // The actual screenshot size might be slightly different than the inner height\n    // In that case, use the screenshot size instead of the innerHeight\n    if (i === 0 && screenshotSize.height !== actualInnerHeight) {\n      if (Math.round(screenshotSize.height) === actualInnerHeight) {\n        actualInnerHeight = screenshotSize.height;\n      }\n      // No else, because some drivers take a full page screenshot, e.g. some versions of FireFox,\n      // and SafariDriver for Safari 11\n    }\n\n    // Determine scroll height and check if we need to scroll again\n    scrollHeight = await executor(getDocumentScrollHeight);\n\n    if (scrollY + actualInnerHeight < scrollHeight && screenshotSize.height === actualInnerHeight) {\n      amountOfScrollsArray.push(amountOfScrollsArray.length);\n    }\n    // There is no else, Lazy load and large screenshots,\n    // like with older drivers such as FF <= 47 and IE11, will not work\n\n    // The height of the image of the last 1 could be different\n    const imageHeight: number =\n      amountOfScrollsArray.length === i ? scrollHeight - actualInnerHeight * viewportScreenshots.length : screenshotSize.height;\n    // The starting position for cropping could be different for the last image (0 means no cropping)\n    const imageYPosition =\n      amountOfScrollsArray.length === i && amountOfScrollsArray.length !== 0 ? actualInnerHeight - imageHeight : 0;\n\n    // Store all the screenshot data in the screenshot object\n    viewportScreenshots.push({\n      ...calculateDprData(\n        {\n          canvasWidth: screenshotSize.width,\n          canvasYPosition: scrollY,\n          imageHeight: imageHeight,\n          imageWidth: screenshotSize.width,\n          imageXPosition: 0,\n          imageYPosition: imageYPosition,\n        },\n        devicePixelRatio,\n      ),\n      screenshot,\n    });\n  }\n\n  // Put back the hidden elements to visible\n  if (hideAfterFirstScroll.length > 0) {\n    try {\n      await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, false);\n    } catch (e) {\n      logHiddenRemovedError(e, logLevel);\n    }\n  }\n\n  return {\n    ...calculateDprData(\n      {\n        fullPageHeight: scrollHeight,\n        fullPageWidth: screenshotSize.width,\n      },\n      devicePixelRatio,\n    ),\n    data: viewportScreenshots,\n  };\n}\n\n/**\n * Take a screenshot\n */\nexport async function takeBase64Screenshot(takeScreenshot: TakeScreenShot): Promise<string> {\n  return takeScreenshot();\n}\n\n/**\n * Log an error for not being able to hide remove elements\n *\n * @TODO: remove the any\n */\nfunction logHiddenRemovedError(error: any, logLevel: LogLevel) {\n  if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n    console.log(\n      '\\x1b[33m%s\\x1b[0m',\n      `\n#####################################################################################\n WARNING:\n (One of) the elements that needed to be hidden or removed could not be found on the\n page and caused this error\n Error: ${error}\n We made sure the test didn't break.\n#####################################################################################\n`,\n    );\n  }\n}\n"]}