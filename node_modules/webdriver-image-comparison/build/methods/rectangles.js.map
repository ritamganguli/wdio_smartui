{"version":3,"file":"rectangles.js","sourceRoot":"","sources":["../../lib/methods/rectangles.ts"],"names":[],"mappings":"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","sourcesContent":["import { calculateDprData, checkAndroidNativeWebScreenshot, checkIsIos, getScreenshotSize } from '../helpers/utils';\nimport { getElementPositionAndroid, getElementPositionDesktop, getElementPositionIos } from './elementPosition';\nimport { IOS_OFFSETS, ANDROID_OFFSETS } from '../helpers/constants';\nimport {\n  ElementRectangles,\n  RectanglesOutput,\n  ScreenRectanglesOptions,\n  StatusAddressToolBarRectangles,\n  StatusAddressToolBarRectanglesOptions,\n} from './rectangles.interfaces';\nimport { Executor } from './methods.interface';\nimport getIosStatusAddressToolBarOffsets from '../clientSideScripts/getIosStatusAddressToolBarOffsets';\nimport getAndroidStatusAddressToolBarOffsets from '../clientSideScripts/getAndroidStatusAddressToolBarOffsets';\nimport { StatusAddressToolBarOffsets } from '../clientSideScripts/statusAddressToolBarOffsets.interfaces';\n\n/**\n * Determine the element rectangles on the page / screenshot\n */\nexport async function determineElementRectangles({\n  executor,\n  base64Image,\n  options,\n  element,\n}: ElementRectangles): Promise<RectanglesOutput> {\n  // Determine screenshot data\n  const { devicePixelRatio, innerHeight, isAndroid, isAndroidNativeWebScreenshot, isIos, isLandscape } = options;\n  const { height } = getScreenshotSize(base64Image, devicePixelRatio);\n  let elementPosition;\n\n  // Determine the element position on the screenshot\n  if (isIos) {\n    elementPosition = await getElementPositionIos(executor, element, { isLandscape });\n  } else if (isAndroid) {\n    elementPosition = await getElementPositionAndroid(executor, element, { isAndroidNativeWebScreenshot, isLandscape });\n  } else {\n    elementPosition = await getElementPositionDesktop(executor, element, { innerHeight, screenshotHeight: height });\n  }\n\n  // Validate if the element is visible\n  if (elementPosition.height === 0 || elementPosition.width === 0) {\n    let selectorMessage = ' ';\n    if (element.selector) {\n      selectorMessage = `, with selector \"$(${element.selector})\",`;\n    }\n    const message = `The element${selectorMessage}is not visible. The dimensions are ${elementPosition.width}x${elementPosition.height}`;\n    throw new Error(message);\n  }\n\n  // Determine the rectangles based on the device pixel ratio\n  return calculateDprData(\n    {\n      height: elementPosition.height,\n      width: elementPosition.width,\n      x: elementPosition.x,\n      y: elementPosition.y,\n    },\n    devicePixelRatio,\n  );\n}\n\n/**\n * Determine the rectangles of the screen for the screenshot\n */\nexport function determineScreenRectangles(base64Image: string, options: ScreenRectanglesOptions): RectanglesOutput {\n  // Determine screenshot data\n  const {\n    devicePixelRatio,\n    innerHeight,\n    innerWidth,\n    isIos,\n    isAndroidChromeDriverScreenshot,\n    isAndroidNativeWebScreenshot,\n    isLandscape,\n  } = options;\n  const { height, width } = getScreenshotSize(base64Image, devicePixelRatio);\n\n  // Determine the width\n  const screenshotWidth = isIos || isAndroidChromeDriverScreenshot ? width : innerWidth;\n  const screenshotHeight = isIos || isAndroidNativeWebScreenshot ? height : innerHeight;\n  const isRotated = isLandscape && height > width;\n\n  // Determine the rectangles\n  return calculateDprData(\n    {\n      height: isRotated ? screenshotWidth : screenshotHeight,\n      width: isRotated ? screenshotHeight : screenshotWidth,\n      x: 0,\n      y: 0,\n    },\n    devicePixelRatio,\n  );\n}\n\n/**\n * Determine the rectangles for the mobile devices\n */\nexport async function determineStatusAddressToolBarRectangles(\n  executor: Executor,\n  options: StatusAddressToolBarRectanglesOptions,\n): Promise<StatusAddressToolBarRectangles> {\n  const {\n    blockOutSideBar,\n    blockOutStatusBar,\n    blockOutToolBar,\n    isAndroidNativeWebScreenshot,\n    isHybridApp,\n    isLandscape,\n    isMobile,\n    isViewPortScreenshot,\n    platformName,\n  } = options;\n  const rectangles = [];\n\n  if (\n    isViewPortScreenshot &&\n    isMobile &&\n    (checkAndroidNativeWebScreenshot(platformName, isAndroidNativeWebScreenshot) || checkIsIos(platformName))\n  ) {\n    const { sideBar, statusAddressBar, toolBar } = (await (checkIsIos(platformName)\n      ? executor(getIosStatusAddressToolBarOffsets, IOS_OFFSETS, isLandscape)\n      : executor(getAndroidStatusAddressToolBarOffsets, ANDROID_OFFSETS, {\n          isHybridApp,\n          isLandscape,\n        }))) as StatusAddressToolBarOffsets;\n\n    if (blockOutStatusBar) {\n      rectangles.push(statusAddressBar);\n    }\n\n    if (blockOutToolBar) {\n      rectangles.push(toolBar);\n    }\n\n    if (blockOutSideBar) {\n      rectangles.push(sideBar);\n    }\n  }\n\n  return rectangles;\n}\n"]}