{"version":3,"file":"elementPosition.js","sourceRoot":"","sources":["../../lib/methods/elementPosition.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gGAA2F;AAC3F,0FAAqF;AACrF,wHAAuH;AACvH,kDAAoE;AAGpE,oHAA+G;AAC/G,4GAAuG;AAMvG,SAAsB,yBAAyB,CAC7C,QAAkB,EAClB,OAAoB,EACpB,EAA8G;QAA5G,4BAA4B,kCAAA,EAAE,WAAW,iBAAA;;;;;;yBAGvC,4BAA4B,EAA5B,cAA4B;oBAQ5B,WAAM,QAAQ,CAAC,+CAAqC,EAAE,2BAAe,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAPvG,KAM2B,CAC/B,SAA2G,CAC5G,EAPC,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,WAAW,iBAAA,EACO,YAAY,mBAAA,EACV,MAAM,6BAAA;oBAK5B,WAAO,QAAQ,CAAC,iFAAuC,EAAE,OAAO,EAAE;4BAChE,WAAW,aAAA;4BACX,QAAQ,UAAA;4BACR,YAAY,cAAA;4BACZ,WAAW,aAAA;4BACX,YAAY,cAAA;4BACZ,yBAAyB,EAAE,MAAM;yBAClC,CAAC,EAAC;wBAIL,WAAO,QAAQ,CAAC,qCAA2B,EAAE,OAAO,CAAC,EAAC;;;;CACvD;AA7BD,8DA6BC;AAiBD,SAAsB,yBAAyB,CAC7C,QAAkB,EAClB,OAAoB,EACpB,EAAoF;QAAlF,WAAW,iBAAA,EAAE,gBAAgB,sBAAA;;;YAE/B,IAAI,gBAAgB,GAAG,WAAW,EAAE;gBAClC,WAAO,QAAQ,CAAC,kCAAwB,EAAE,OAAO,CAAC,EAAC;aACpD;YAED,WAAO,QAAQ,CAAC,qCAA2B,EAAE,OAAO,CAAC,EAAC;;;CACvD;AAVD,8DAUC;AAKD,SAAsB,qBAAqB,CACzC,QAAkB,EAClB,OAAoB,EACpB,EAAyC;QAAvC,WAAW,iBAAA;;;;;wBASoB,WAAM,QAAQ,CAAC,2CAAiC,EAAE,uBAAW,EAAE,WAAW,CAAC,EAAA;;oBANtG,KAM2B,SAA2E,EAL1G,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,WAAW,iBAAA,EACO,YAAY,mBAAA,EACV,MAAM,6BAAA;oBAG5B,WAAO,QAAQ,CAAC,iFAAuC,EAAE,OAAO,EAAE;4BAChE,WAAW,aAAA;4BACX,QAAQ,UAAA;4BACR,YAAY,cAAA;4BACZ,WAAW,aAAA;4BACX,YAAY,cAAA;4BACZ,yBAAyB,EAAE,MAAM;yBAClC,CAAC,EAAC;;;;CACJ;AAtBD,sDAsBC","sourcesContent":["import getElementPositionTopWindow from '../clientSideScripts/getElementPositionTopWindow';\nimport getElementPositionTopDom from '../clientSideScripts/getElementPositionTopDom';\nimport { getElementPositionTopScreenNativeMobile } from '../clientSideScripts/getElementPositionTopScreenNativeMobile';\nimport { ANDROID_OFFSETS, IOS_OFFSETS } from '../helpers/constants';\nimport { Executor } from './methods.interface';\nimport { ElementPosition } from '../clientSideScripts/elementPosition.interfaces';\nimport getAndroidStatusAddressToolBarOffsets from '../clientSideScripts/getAndroidStatusAddressToolBarOffsets';\nimport getIosStatusAddressToolBarOffsets from '../clientSideScripts/getIosStatusAddressToolBarOffsets';\nimport { StatusAddressToolBarOffsets } from '../clientSideScripts/statusAddressToolBarOffsets.interfaces';\n\n/**\n * Get the element position on a Android device\n */\nexport async function getElementPositionAndroid(\n  executor: Executor,\n  element: HTMLElement,\n  { isAndroidNativeWebScreenshot, isLandscape }: { isAndroidNativeWebScreenshot: boolean; isLandscape: boolean },\n): Promise<ElementPosition> {\n  // This is the native web screenshot\n  if (isAndroidNativeWebScreenshot) {\n    const {\n      safeArea,\n      screenHeight,\n      screenWidth,\n      sideBar: { width: sideBarWidth },\n      statusAddressBar: { height },\n    } = <StatusAddressToolBarOffsets>(\n      await executor(getAndroidStatusAddressToolBarOffsets, ANDROID_OFFSETS, { isHybridApp: false, isLandscape })\n    );\n\n    return executor(getElementPositionTopScreenNativeMobile, element, {\n      isLandscape,\n      safeArea,\n      screenHeight,\n      screenWidth,\n      sideBarWidth,\n      statusBarAddressBarHeight: height,\n    });\n  }\n\n  // This is the ChromeDriver screenshot\n  return executor(getElementPositionTopWindow, element);\n}\n\n/**\n * Get the element position on a desktop browser\n *\n * @param {function} executor         The function to execute JS in the browser\n * @param {number}   innerHeight      The inner height of the screen\n * @param {number}   screenshotHeight The screenshot height\n * @param {element}  element          The element\n *\n * @returns {Promise<{\n * \t\theight: number,\n *    width: number,\n *    x: number,\n *    y: number\n * }>}\n */\nexport async function getElementPositionDesktop(\n  executor: Executor,\n  element: HTMLElement,\n  { innerHeight, screenshotHeight }: { innerHeight: number; screenshotHeight: number },\n): Promise<ElementPosition> {\n  if (screenshotHeight > innerHeight) {\n    return executor(getElementPositionTopDom, element);\n  }\n\n  return executor(getElementPositionTopWindow, element);\n}\n\n/**\n * Get the element position on iOS Safari\n */\nexport async function getElementPositionIos(\n  executor: Executor,\n  element: HTMLElement,\n  { isLandscape }: { isLandscape: boolean },\n): Promise<ElementPosition> {\n  // Determine status and address bar height\n  const {\n    safeArea,\n    screenHeight,\n    screenWidth,\n    sideBar: { width: sideBarWidth },\n    statusAddressBar: { height },\n  } = <StatusAddressToolBarOffsets>await executor(getIosStatusAddressToolBarOffsets, IOS_OFFSETS, isLandscape);\n\n  return executor(getElementPositionTopScreenNativeMobile, element, {\n    isLandscape,\n    safeArea,\n    screenHeight,\n    screenWidth,\n    sideBarWidth,\n    statusBarAddressBarHeight: height,\n  });\n}\n"]}