{"version":3,"file":"images.js","sourceRoot":"","sources":["../../lib/methods/images.ts"],"names":[],"mappings":"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","sourcesContent":["import { access, copySync, outputFile, readFileSync } from 'fs-extra';\nimport { join } from 'path';\nimport { createCanvas, loadImage } from 'canvas';\nimport compareImages from '../resemble/compareImages';\nimport { calculateDprData, getAndCreatePath, getIosBezelImageNames, getScreenshotSize } from '../helpers/utils';\nimport { DEFAULT_RESIZE_DIMENSIONS, supportedIosBezelDevices } from '../helpers/constants';\nimport { determineStatusAddressToolBarRectangles } from './rectangles';\nimport {\n  CompareOptions,\n  CroppedBase64Image,\n  IgnoreBoxes,\n  ImageCompareOptions,\n  ImageCompareResult,\n  RotateBase64ImageOptions,\n} from './images.interfaces';\nimport { FullPageScreenshotsData } from './screenshots.interfaces';\nimport { Executor } from './methods.interface';\nimport { CompareData } from '../resemble/compare.interfaces';\nimport { LogLevel } from '../helpers/options.interface';\n\n/**\n * Check if the image exists and create a new baseline image if needed\n */\nexport async function checkBaselineImageExists(\n  actualFilePath: string,\n  baselineFilePath: string,\n  autoSaveBaseline: boolean,\n  logLevel: LogLevel,\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    access(baselineFilePath, (error) => {\n      if (error) {\n        if (autoSaveBaseline) {\n          try {\n            copySync(actualFilePath, baselineFilePath);\n            if (logLevel === LogLevel.info) {\n              console.log(\n                '\\x1b[33m%s\\x1b[0m',\n                `\n#####################################################################################\n INFO:\n Autosaved the image to\n ${baselineFilePath}\n#####################################################################################\n`,\n              );\n            }\n          } catch (error) {\n            /* istanbul ignore next */\n            reject(\n              `\n#####################################################################################\n Image could not be copied. The following error was thrown:\n ${error}\n#####################################################################################\n`,\n            );\n          }\n        } else {\n          reject(\n            `\n#####################################################################################\n Baseline image not found, save the actual image manually to the baseline.\n The image can be found here:\n ${actualFilePath}\n If you want the module to auto save a non existing image to the baseline you\n can provide 'autoSaveBaseline: true' to the options.\n#####################################################################################\n`,\n          );\n        }\n      }\n      resolve();\n    });\n  });\n}\n\n/**\n * Make a cropped image with Canvas\n */\nexport async function makeCroppedBase64Image({\n  addIOSBezelCorners,\n  base64Image,\n  deviceName,\n  devicePixelRatio,\n  isIos,\n  isLandscape,\n  logLevel,\n  rectangles,\n  resizeDimensions = DEFAULT_RESIZE_DIMENSIONS,\n}: CroppedBase64Image): Promise<string> {\n  // Determine if the image is rotated\n  const { height: screenshotHeight, width: screenshotWidth } = getScreenshotSize(base64Image, devicePixelRatio);\n  const isRotated = isLandscape && screenshotHeight > screenshotWidth;\n  // If so we need to rotate is -90 degrees\n  const newBase64Image = isRotated\n    ? await rotateBase64Image({ base64Image, degrees: -90, newHeight: screenshotWidth, newWidth: screenshotHeight })\n    : base64Image;\n  /**\n   * This is in for backwards compatibility, it will be removed in the future\n   */\n  let resizeValues;\n  if (typeof resizeDimensions === 'number') {\n    resizeValues = {\n      top: resizeDimensions,\n      right: resizeDimensions,\n      bottom: resizeDimensions,\n      left: resizeDimensions,\n    };\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(\n        '\\x1b[33m%s\\x1b[0m',\n        `\n#####################################################################################\n WARNING:\n THE 'resizeDimensions' NEEDS TO BE AN OBJECT LIKE\n {\n    top: 10,\n    right: 20,\n    bottom: 15,\n    left: 25,\n }\n NOW IT WILL BE DEFAULTED TO\n  {\n    top: ${resizeDimensions},\n    right: ${resizeDimensions},\n    bottom: ${resizeDimensions},\n    left: ${resizeDimensions},\n }\n THIS IS DEPRECATED AND WILL BE REMOVED IN A NEW MAJOR RELEASE\n#####################################################################################\n`,\n      );\n    }\n  } else {\n    resizeValues = resizeDimensions;\n  }\n\n  const { top, right, bottom, left }: { top: number; right: number; bottom: number; left: number } = {\n    ...DEFAULT_RESIZE_DIMENSIONS,\n    ...resizeValues,\n  };\n  const { height, width, x, y } = rectangles;\n  const canvasWidth = width + left + right;\n  const canvasHeight = height + top + bottom;\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  const image = await loadImage(`data:image/png;base64,${newBase64Image}`);\n  const ctx = canvas.getContext('2d');\n\n  let sourceXStart = x - left;\n  let sourceYStart = y - top;\n\n  if (sourceXStart < 0) {\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(\n        '\\x1b[33m%s\\x1b[0m',\n        `\n#####################################################################################\n THE RESIZE DIMENSION LEFT '${left}' MADE THE CROPPING GO OUT OF\n THE IMAGE BOUNDARIES RESULTING IN AN IMAGE STARTPOSITION '${sourceXStart}'.\n THIS HAS BEEN DEFAULTED TO '0'\n#####################################################################################\n`,\n      );\n    }\n    sourceXStart = 0;\n  }\n\n  if (sourceYStart < 0) {\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(\n        '\\x1b[33m%s\\x1b[0m',\n        `\n#####################################################################################\n THE RESIZE DIMENSION LEFT '${top}' MADE THE CROPPING GO OUT OF\n THE IMAGE BOUNDARIES RESULTING IN AN IMAGE STARTPOSITION '${sourceYStart}'.\n THIS HAS BEEN DEFAULTED TO '0'\n#####################################################################################\n`,\n      );\n    }\n    sourceYStart = 0;\n  }\n\n  ctx.drawImage(\n    image,\n    // Start at x/y pixels from the left and the top of the image (crop)\n    sourceXStart,\n    sourceYStart,\n    // 'Get' a (w * h) area from the source image (crop)\n    canvasWidth,\n    canvasHeight,\n    // Place the result at 0, 0 in the canvas,\n    0,\n    0,\n    // With as width / height: 100 * 100 (scale)\n    canvasWidth,\n    canvasHeight,\n  );\n\n  // Add the bezel corners to the iOS image if we need to\n  const normalizedDeviceName = deviceName\n    .toLowerCase()\n    // (keep alphanumeric|remove simulator|remove inch|remove 1st/2nd/3rd/4th generation)\n    .replace(/([^A-Za-z0-9]|simulator|inch|(\\d(st|nd|rd|th)) generation)/gi, '');\n  const isSupported =\n    // For iPhone\n    (normalizedDeviceName.includes('iphone') && supportedIosBezelDevices.includes(normalizedDeviceName)) ||\n    // For iPad\n    (normalizedDeviceName.includes('ipad') &&\n      supportedIosBezelDevices.includes(normalizedDeviceName) &&\n      (canvasHeight / devicePixelRatio >= 1133 || canvasWidth / devicePixelRatio >= 1133));\n  let isIosBezelError = false;\n\n  if (addIOSBezelCorners && isIos && isSupported) {\n    // Determine the bezel images\n    const { topImageName, bottomImageName } = getIosBezelImageNames(normalizedDeviceName);\n\n    if (topImageName && bottomImageName) {\n      const topImage = readFileSync(join(__dirname, `../assets/ios/${topImageName}.png`)).toString('base64');\n      const bottomImage = readFileSync(join(__dirname, `../assets/ios/${bottomImageName}.png`)).toString('base64');\n\n      // If the screen is rotated the images need to be rotated\n      const topBase64Image = isLandscape\n        ? await rotateBase64Image({\n            base64Image: topImage,\n            degrees: -90,\n            newHeight: getScreenshotSize(topImage).width,\n            newWidth: getScreenshotSize(topImage).height,\n          })\n        : topImage;\n      const bottomBase64Image = isLandscape\n        ? await rotateBase64Image({\n            base64Image: bottomImage,\n            degrees: -90,\n            newHeight: getScreenshotSize(topImage).width,\n            newWidth: getScreenshotSize(topImage).height,\n          })\n        : bottomImage;\n      // Draw top image, always place it at x=0 and y=0\n      ctx.drawImage(await loadImage(`data:image/png;base64,${topBase64Image}`), 0, 0);\n      // Draw bottom image, depending if the screen is rotated it needs to be placed\n      // y = heightScreen - heightBottom or x = widthScreen - heightBottom\n      ctx.drawImage(\n        await loadImage(`data:image/png;base64,${bottomBase64Image}`),\n        isLandscape ? canvasWidth - getScreenshotSize(bottomImage).height : 0,\n        isLandscape ? 0 : canvasHeight - getScreenshotSize(bottomImage).height,\n      );\n    } else {\n      isIosBezelError = true;\n    }\n  }\n\n  if (addIOSBezelCorners && isIos && !isSupported) {\n    isIosBezelError = true;\n  }\n\n  if (isIosBezelError) {\n    console.log(\n      '\\x1b[33m%s\\x1b[0m',\n      `\n#####################################################################################\n WARNING:\n We could not find the bezel corners for the device '${deviceName}'.\n The normalized device name is '${normalizedDeviceName}'\n and couldn't be found in the supported devices:\n ${supportedIosBezelDevices.join(', ')}\n#####################################################################################\n`,\n    );\n  }\n\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n\n/**\n * Execute the image compare\n */\nexport async function executeImageCompare(\n  executor: Executor,\n  options: ImageCompareOptions,\n  isViewPortScreenshot = false,\n): Promise<ImageCompareResult | number> {\n  // 1. Set some variables\n  const { devicePixelRatio, fileName, isAndroidNativeWebScreenshot, isHybridApp, isLandscape, logLevel, platformName } = options;\n  const { actualFolder, autoSaveBaseline, baselineFolder, browserName, deviceName, diffFolder, isMobile, savePerInstance } =\n    options.folderOptions;\n  let diffFilePath;\n  const imageCompareOptions = { ...options.compareOptions.wic, ...options.compareOptions.method };\n\n  // 2. \tCreate all needed folders\n  const createFolderOptions = { browserName, deviceName, isMobile, savePerInstance };\n  const actualFolderPath = getAndCreatePath(actualFolder, createFolderOptions);\n  const baselineFolderPath = getAndCreatePath(baselineFolder, createFolderOptions);\n  const actualFilePath = join(actualFolderPath, fileName);\n  const baselineFilePath = join(baselineFolderPath, fileName);\n\n  // 3. \tCheck if there is a baseline image, and determine if it needs to be auto saved or not\n  await checkBaselineImageExists(actualFilePath, baselineFilePath, autoSaveBaseline, logLevel);\n\n  // 4. \tPrepare the compare\n  // 4a.\tDetermine the ignore options\n  const resembleIgnoreDefaults = ['alpha', 'antialiasing', 'colors', 'less', 'nothing'];\n  const ignore = resembleIgnoreDefaults.filter((option) =>\n    Object.keys(imageCompareOptions).find(\n      (key) =>\n        // @ts-ignore\n        key.toLowerCase().includes(option) && imageCompareOptions[key],\n    ),\n  );\n\n  // 4b.\tDetermine the ignore rectangles for the blockouts\n  const blockOut = 'blockOut' in imageCompareOptions ? imageCompareOptions.blockOut : [];\n  const statusAddressToolBarOptions = {\n    blockOutSideBar: imageCompareOptions.blockOutSideBar,\n    blockOutStatusBar: imageCompareOptions.blockOutStatusBar,\n    blockOutToolBar: imageCompareOptions.blockOutToolBar,\n    isHybridApp,\n    isLandscape,\n    isMobile,\n    isViewPortScreenshot,\n    isAndroidNativeWebScreenshot,\n    platformName,\n  };\n\n  const ignoredBoxes = blockOut\n    .concat(\n      // 4c.\tAdd the mobile rectangles that need to be ignored\n      await determineStatusAddressToolBarRectangles(executor, statusAddressToolBarOptions),\n    )\n    .map(\n      // 4d.\tMake sure all the rectangles are equal to the dpr for the screenshot\n      (rectangles) => {\n        return calculateDprData(\n          {\n            // Adjust for the ResembleJS API\n            bottom: rectangles.y + rectangles.height,\n            right: rectangles.x + rectangles.width,\n            left: rectangles.x,\n            top: rectangles.y,\n          },\n          devicePixelRatio,\n        );\n      },\n    );\n\n  const compareOptions: CompareOptions = {\n    ignore,\n    ...(ignoredBoxes.length > 0 ? { output: { ignoredBoxes } } : {}),\n    scaleToSameSize: imageCompareOptions.scaleImagesToSameSize,\n  };\n\n  // 5.\t\tExecute the compare and retrieve the data\n  const data: CompareData = await compareImages(readFileSync(baselineFilePath), readFileSync(actualFilePath), compareOptions);\n  const rawMisMatchPercentage = data.rawMisMatchPercentage;\n  const reportMisMatchPercentage = imageCompareOptions.rawMisMatchPercentage\n    ? rawMisMatchPercentage\n    : Number(data.rawMisMatchPercentage.toFixed(3));\n\n  // 6.\t\tSave the diff when there is a diff or when debug mode is on\n  if (rawMisMatchPercentage > imageCompareOptions.saveAboveTolerance || logLevel === LogLevel.debug) {\n    const isDifference = rawMisMatchPercentage > imageCompareOptions.saveAboveTolerance;\n    const isDifferenceMessage = 'WARNING:\\n There was a difference. Saved the difference to';\n    const debugMessage = 'INFO:\\n Debug mode is enabled. Saved the debug file to:';\n    const diffFolderPath = getAndCreatePath(diffFolder, createFolderOptions);\n    diffFilePath = join(diffFolderPath, fileName);\n\n    await saveBase64Image(await addBlockOuts(Buffer.from(data.getBuffer()).toString('base64'), ignoredBoxes), diffFilePath);\n\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n      console.log(\n        '\\x1b[33m%s\\x1b[0m',\n        `\n#####################################################################################\n ${isDifference ? isDifferenceMessage : debugMessage}\n ${diffFilePath}\n#####################################################################################\n`,\n      );\n    }\n  }\n\n  // 7. \tReturn the comparison data\n  return imageCompareOptions.returnAllCompareData\n    ? {\n        fileName,\n        folders: {\n          actual: actualFilePath,\n          baseline: baselineFilePath,\n          ...(diffFilePath ? { diff: diffFilePath } : {}),\n        },\n        misMatchPercentage: reportMisMatchPercentage,\n      }\n    : reportMisMatchPercentage;\n}\n\n/**\n * Make a full page image with Canvas\n */\nexport async function makeFullPageBase64Image(\n  screenshotsData: FullPageScreenshotsData,\n  { devicePixelRatio, isLandscape }: { devicePixelRatio: number; isLandscape: boolean },\n): Promise<string> {\n  const amountOfScreenshots = screenshotsData.data.length;\n  const { fullPageHeight: canvasHeight, fullPageWidth: canvasWidth } = screenshotsData;\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  const ctx = canvas.getContext('2d');\n\n  // Load all the images\n  for (let i = 0; i < amountOfScreenshots; i++) {\n    const currentScreenshot = screenshotsData.data[i].screenshot;\n    // Determine if the image is rotated\n    const { height: screenshotHeight, width: screenshotWidth } = getScreenshotSize(currentScreenshot, devicePixelRatio);\n    const isRotated = isLandscape && screenshotHeight > screenshotWidth;\n    // If so we need to rotate is -90 degrees\n    const newBase64Image = isRotated\n      ? await rotateBase64Image({\n          base64Image: currentScreenshot,\n          degrees: -90,\n          newHeight: screenshotWidth,\n          newWidth: screenshotHeight,\n        })\n      : currentScreenshot;\n    const { canvasYPosition, imageHeight, imageWidth, imageXPosition, imageYPosition } = screenshotsData.data[i];\n    const image = await loadImage(`data:image/png;base64,${newBase64Image}`);\n\n    ctx.drawImage(\n      image,\n      // Start at x/y pixels from the left and the top of the image (crop)\n      imageXPosition,\n      imageYPosition,\n      // 'Get' a (w * h) area from the source image (crop)\n      imageWidth,\n      imageHeight,\n      // Place the result at 0, 0 in the canvas,\n      0,\n      canvasYPosition,\n      // With as width / height: 100 * 100 (scale)\n      imageWidth,\n      imageHeight,\n    );\n  }\n\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n\n/**\n * Save the base64 image to a file\n */\nexport async function saveBase64Image(base64Image: string, filePath: string): Promise<void> {\n  return outputFile(filePath, base64Image, 'base64');\n}\n\n/**\n * Create a canvas with the ignore boxes if they are present\n */\nexport async function addBlockOuts(screenshot: string, ignoredBoxes: IgnoreBoxes[]): Promise<string> {\n  // Create canvas and load image\n  const { height, width } = getScreenshotSize(screenshot);\n  const canvas = createCanvas(width, height);\n  const image = await loadImage(`data:image/png;base64,${screenshot}`);\n  const canvasContext = canvas.getContext('2d');\n\n  // Draw the image on canvas\n  canvasContext.drawImage(\n    image,\n    // Start at x/y pixels from the left and the top of the image (crop)\n    0,\n    0,\n    // 'Get' a (w * h) area from the source image (crop)\n    width,\n    height,\n    // Place the result at 0, 0 in the canvas,\n    0,\n    0,\n    // With as width / height: 100 * 100 (scale)\n    width,\n    height,\n  );\n\n  // Loop over all ignored areas and add them to the current canvas\n  ignoredBoxes.forEach((ignoredBox) => {\n    const { right: ignoredBoxWidth, bottom: ignoredBoxHeight, left: x, top: y } = ignoredBox;\n    const ignoreCanvas = createCanvas(ignoredBoxWidth - x, ignoredBoxHeight - y);\n    const ignoreContext = ignoreCanvas.getContext('2d');\n\n    // Add a background color to the ignored box\n    ignoreContext.globalAlpha = 0.5;\n    ignoreContext.fillStyle = '#39aa56';\n    ignoreContext.fillRect(0, 0, ignoredBoxWidth - x, ignoredBoxHeight - y);\n\n    // add to canvasContext\n    canvasContext.drawImage(ignoreCanvas, x, y);\n  });\n\n  // Return the screenshot\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n\n/**\n * Rotate a base64 image\n * Tnx to https://gist.github.com/Zyndoras/6897abdf53adbedf02564808aaab94db\n */\nasync function rotateBase64Image({ base64Image, degrees, newHeight, newWidth }: RotateBase64ImageOptions): Promise<string> {\n  const canvas = createCanvas(newWidth, newHeight);\n  const ctx = canvas.getContext('2d');\n  const image = await loadImage(`data:image/png;base64,${base64Image}`);\n\n  canvas.width = degrees % 180 === 0 ? image.width : image.height;\n  canvas.height = degrees % 180 === 0 ? image.height : image.width;\n\n  ctx.translate(canvas.width / 2, canvas.height / 2);\n  ctx.rotate((degrees * Math.PI) / 180);\n  ctx.drawImage(image, image.width / -2, image.height / -2);\n\n  return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '');\n}\n"]}