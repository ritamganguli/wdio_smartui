{"version":3,"file":"rectangles.spec.js","sourceRoot":"","sources":["../../lib/methods/rectangles.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { determineElementRectangles, determineScreenRectangles, determineStatusAddressToolBarRectangles } from './rectangles';\nimport { IMAGE_STRING } from '../mocks/mocks';\n\ndescribe('rectangles', () => {\n  describe('determineElementRectangles', () => {\n    it('should determine them for iOS', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 678,\n        isIos: true,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // getElementPositionIos for: getIosStatusAddressToolBarOffsets\n        .mockResolvedValueOnce({\n          sideBar: {\n            height: 240,\n            width: 120,\n            x: 0,\n            y: 70,\n          },\n          statusAddressBar: {\n            height: 94,\n            width: 375,\n            x: 0,\n            y: 0,\n          },\n          toolBar: {\n            height: 5,\n            width: 135,\n            x: 120,\n            y: 799,\n          },\n        })\n        // getElementPositionIos for: getElementPositionTopScreenNativeMobile\n        .mockResolvedValueOnce({\n          height: 120,\n          width: 120,\n          x: 100,\n          y: 10,\n        });\n\n      expect(\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: 'element',\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should determine them for Android Native webscreenshot', async () => {\n      const options = {\n        isAndroid: true,\n        devicePixelRatio: 3,\n        isAndroidNativeWebScreenshot: true,\n        innerHeight: 678,\n        isIos: false,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // getElementPositionAndroid for: getAndroidStatusAddressToolBarOffsets\n        .mockResolvedValueOnce({\n          sideBar: {\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n          },\n          statusAddressBar: {\n            height: 20,\n            width: 375,\n            x: 0,\n            y: 0,\n          },\n          toolBar: {\n            height: 5,\n            width: 135,\n            x: 120,\n            y: 799,\n          },\n        })\n        // getElementPositionIos for: getElementPositionTopScreenNativeMobile\n        .mockResolvedValueOnce({\n          height: 120,\n          width: 120,\n          x: 100,\n          y: 10,\n        });\n\n      expect(\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: 'element',\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should determine them for Android ChromeDriver', async () => {\n      const options = {\n        isAndroid: true,\n        devicePixelRatio: 1,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 678,\n        isIos: false,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // getElementPositionAndroid for: getElementPositionTopWindow\n        .mockResolvedValueOnce({\n          height: 20,\n          width: 375,\n          x: 0,\n          y: 0,\n        });\n\n      expect(\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: 'element',\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should determine them for a desktop browser', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 500,\n        isIos: false,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // getElementPositionDesktop for: getElementPositionTopWindow\n        .mockResolvedValueOnce({\n          height: 20,\n          width: 375,\n          x: 12,\n          y: 34,\n        });\n\n      expect(\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: 'element',\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when the element height is 0', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 500,\n        isIos: false,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn().mockResolvedValueOnce({\n        height: 0,\n        width: 375,\n        x: 12,\n        y: 34,\n      });\n\n      try {\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: { selector: '#elementID' },\n        });\n        // Fail test if above expression doesn't throw anything.\n        expect(true).toBe(false);\n      } catch (e) {\n        expect(e.message).toBe('The element, with selector \"$(#elementID)\",is not visible. The dimensions are 375x0');\n      }\n    });\n\n    it('should throw an error when the element width is 0', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 500,\n        isIos: false,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn().mockResolvedValueOnce({\n        height: 375,\n        width: 0,\n        x: 12,\n        y: 34,\n      });\n\n      try {\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: { selector: '#elementID' },\n        });\n        // Fail test if above expression doesn't throw anything.\n        expect(true).toBe(false);\n      } catch (e) {\n        expect(e.message).toBe('The element, with selector \"$(#elementID)\",is not visible. The dimensions are 0x375');\n      }\n    });\n\n    it('should throw an error when the element width is 0 and no element selector is provided', async () => {\n      const options = {\n        isAndroid: false,\n        devicePixelRatio: 2,\n        isAndroidNativeWebScreenshot: false,\n        innerHeight: 500,\n        isIos: false,\n        isLandscape: false,\n      };\n      const MOCKED_EXECUTOR = jest.fn().mockResolvedValueOnce({\n        height: 375,\n        width: 0,\n        x: 12,\n        y: 34,\n      });\n\n      try {\n        await determineElementRectangles({\n          executor: MOCKED_EXECUTOR,\n          base64Image: IMAGE_STRING,\n          options,\n          element: {},\n        });\n        // Fail test if above expression doesn't throw anything.\n        expect(true).toBe(false);\n      } catch (e) {\n        expect(e.message).toBe('The element is not visible. The dimensions are 0x375');\n      }\n    });\n  });\n\n  describe('determineScreenRectangles', () => {\n    it('should determine them for iOS', async () => {\n      const options = {\n        innerHeight: 553,\n        innerWidth: 375,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: false,\n        isIos: true,\n        devicePixelRatio: 2,\n        isLandscape: false,\n      };\n\n      expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot();\n    });\n\n    it('should determine them for Android ChromeDriver', async () => {\n      const options = {\n        innerHeight: 553,\n        innerWidth: 375,\n        isAndroidNativeWebScreenshot: false,\n        isAndroidChromeDriverScreenshot: true,\n        isIos: false,\n        devicePixelRatio: 2,\n        isLandscape: false,\n      };\n\n      expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot();\n    });\n\n    it('should determine them for Android Native webscreenshot', async () => {\n      const options = {\n        innerHeight: 553,\n        innerWidth: 375,\n        isAndroidNativeWebScreenshot: true,\n        isAndroidChromeDriverScreenshot: false,\n        isIos: false,\n        devicePixelRatio: 2,\n        isLandscape: false,\n      };\n\n      expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot();\n    });\n  });\n\n  describe('determineStatusAddressToolBarRectangles', () => {\n    it('should determine the rectangles for the iOS with a status and toolbar blockout', async () => {\n      const options = {\n        blockOutSideBar: true,\n        blockOutStatusBar: true,\n        blockOutToolBar: true,\n        isAndroidNativeWebScreenshot: false,\n        isHybridApp: false,\n        isLandscape: false,\n        isMobile: true,\n        isViewPortScreenshot: true,\n        platformName: 'iOS',\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // determineStatusAddressToolBarRectangles for: getIosStatusAddressToolBarOffsets\n        .mockResolvedValueOnce({\n          sideBar: {\n            height: 240,\n            width: 120,\n            x: 0,\n            y: 70,\n          },\n          statusAddressBar: {\n            height: 94,\n            width: 375,\n            x: 0,\n            y: 0,\n          },\n          toolBar: {\n            height: 5,\n            width: 135,\n            x: 120,\n            y: 799,\n          },\n        });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n\n    it('should determine the rectangles for the iOS without a status and toolbar blockout', async () => {\n      const options = {\n        blockOutSideBar: false,\n        blockOutStatusBar: false,\n        blockOutToolBar: false,\n        isAndroidNativeWebScreenshot: false,\n        isHybridApp: false,\n        isLandscape: false,\n        isMobile: true,\n        isViewPortScreenshot: true,\n        platformName: 'iOS',\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // determineStatusAddressToolBarRectangles for: getIosStatusAddressToolBarOffsets\n        .mockResolvedValueOnce({\n          sideBar: {\n            height: 240,\n            width: 120,\n            x: 0,\n            y: 70,\n          },\n          statusAddressBar: {\n            height: 94,\n            width: 375,\n            x: 0,\n            y: 0,\n          },\n          toolBar: {\n            height: 5,\n            width: 135,\n            x: 0,\n            y: 799,\n          },\n        });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n\n    it('should determine the rectangles for Android with a status and toolbar blockout', async () => {\n      const options = {\n        blockOutSideBar: true,\n        blockOutStatusBar: true,\n        blockOutToolBar: true,\n        isAndroidNativeWebScreenshot: true,\n        isHybridApp: false,\n        isLandscape: false,\n        isMobile: true,\n        isViewPortScreenshot: true,\n        platformName: 'Android',\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // determineStatusAddressToolBarRectangles for: getAndroidStatusAddressToolBarOffsets\n        .mockResolvedValueOnce({\n          sideBar: {\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n          },\n          statusAddressBar: {\n            height: 40,\n            width: 320,\n            x: 0,\n            y: 0,\n          },\n          toolBar: {\n            height: 100,\n            width: 320,\n            x: 0,\n            y: 600,\n          },\n        });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n\n    it('should determine the rectangles that there are no rectangles for this device', async () => {\n      const options = {\n        blockOutSideBar: false,\n        blockOutStatusBar: false,\n        blockOutToolBar: false,\n        isAndroidNativeWebScreenshot: false,\n        isHybridApp: false,\n        isLandscape: false,\n        isMobile: true,\n        isViewPortScreenshot: false,\n        platformName: 'Android',\n      };\n      const MOCKED_EXECUTOR = jest\n        .fn()\n        // determineStatusAddressToolBarRectangles for: getAndroidStatusAddressToolBarOffsets\n        .mockResolvedValueOnce({\n          statusAddressBar: {\n            height: 40,\n            width: 320,\n            x: 0,\n            y: 0,\n          },\n          toolBar: {\n            height: 100,\n            width: 320,\n            x: 0,\n            y: 600,\n          },\n        });\n\n      expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot();\n    });\n  });\n});\n"]}