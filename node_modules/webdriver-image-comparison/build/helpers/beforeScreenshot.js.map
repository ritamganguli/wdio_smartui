{"version":3,"file":"beforeScreenshot.js","sourceRoot":"","sources":["../../lib/helpers/beforeScreenshot.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sEAAiE;AACjE,kEAA6D;AAC7D,yCAA4C;AAC5C,iCAAsG;AACtG,wDAA8D;AAG9D,8EAAyE;AACzE,yDAA+C;AAK/C,SAA8B,gBAAgB,CAC5C,QAAkB,EAClB,OAAgC,EAChC,gBAAwB;IAAxB,iCAAA,EAAA,wBAAwB;;;;;;oBAElB,KAAqD,OAAO,CAAC,YAAY,EAAvE,WAAW,iBAAA,EAAE,mBAAmB,yBAAA,EAAE,YAAY,kBAAA,CAA0B;oBAE9E,uBAAuB,GAOrB,OAAO,wBAPc,EACvB,mBAAmB,GAMjB,OAAO,oBANU,EACnB,YAAY,GAKV,OAAO,aALG,EACZ,QAAQ,GAIN,OAAO,SAJD,EACR,YAAY,GAGV,OAAO,aAHG,EACZ,cAAc,GAEZ,OAAO,eAFK,EACd,oBAAoB,GAClB,OAAO,qBADW,CACV;oBACN,iBAAiB,GAAG,IAAA,kCAA0B,EAAC;wBACnD,YAAY,cAAA;wBACZ,WAAW,aAAA;wBACX,mBAAmB,qBAAA;wBACnB,uBAAuB,yBAAA;wBACvB,gBAAgB,kBAAA;qBACjB,CAAC,CAAC;oBACG,cAAc,GAAG,IAAA,+BAAuB,EAAC,EAAE,YAAY,cAAA,EAAE,WAAW,aAAA,EAAE,oBAAoB,sBAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC,CAAC;yBAGlH,YAAY,EAAZ,cAAY;oBACd,WAAM,QAAQ,CAAC,wBAAc,EAAE,YAAY,CAAC,EAAA;;oBAA5C,SAA4C,CAAC;;;yBAI3C,CAAA,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,CAAA,EAApD,cAAoD;;;;oBAEpD,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,IAAI,CAAC,EAAA;;oBAAxF,SAAwF,CAAC;;;;oBAEzF,IAAI,QAAQ,KAAK,4BAAQ,CAAC,KAAK,IAAI,QAAQ,KAAK,4BAAQ,CAAC,IAAI,EAAE;wBAC7D,OAAO,CAAC,GAAG,CACT,mBAAmB,EACnB,yOAKA,GAAC,oIAGV,CACQ,CAAC;qBACH;;;yBAKD,CAAA,mBAAmB,IAAI,IAAA,qBAAa,EAAC,YAAY,CAAC,CAAA,EAAlD,cAAkD;oBACpD,WAAM,QAAQ,CAAC,sBAAY,EAAE,EAAE,iBAAiB,mBAAA,EAAE,mBAAmB,qBAAA,EAAE,EAAE,EAAE,yBAAa,EAAE,cAAc,gBAAA,EAAE,CAAC,EAAA;;oBAA3G,SAA2G,CAAC;oBAG5G,WAAM,IAAA,eAAO,EAAC,GAAG,CAAC,EAAA;;oBAAlB,SAAkB,CAAC;;;oBAIf,eAAe,cACnB,uBAAuB,EAAE,OAAO,CAAC,uBAAuB,EACxD,oBAAoB,EAAE,OAAO,CAAC,oBAAoB,IAC/C,OAAO,CAAC,YAAY,CACxB,CAAC;oBAEF,WAAO,IAAA,sBAAuB,EAAC,QAAQ,EAAE,eAAe,EAAE,gBAAgB,CAAC,EAAC;;;;CAC7E;AAnED,mCAmEC","sourcesContent":["import hideScrollBars from '../clientSideScripts/hideScrollbars';\nimport setCustomCss from '../clientSideScripts/setCustomCss';\nimport { CUSTOM_CSS_ID } from './constants';\nimport { checkIsMobile, getAddressBarShadowPadding, getToolBarShadowPadding, waitFor } from './utils';\nimport getEnrichedInstanceData from '../methods/instanceData';\nimport { BeforeScreenshotOptions, BeforeScreenshotResult } from './beforeScreenshot.interface';\nimport { Executor } from '../methods/methods.interface';\nimport hideRemoveElements from '../clientSideScripts/hideRemoveElements';\nimport { LogLevel } from './options.interface';\n\n/**\n * Methods that need to be executed before a screenshot will be taken\n */\nexport default async function beforeScreenshot(\n  executor: Executor,\n  options: BeforeScreenshotOptions,\n  addShadowPadding = false,\n): Promise<BeforeScreenshotResult> {\n  const { browserName, nativeWebScreenshot, platformName } = options.instanceData;\n  const {\n    addressBarShadowPadding,\n    disableCSSAnimation,\n    hideElements,\n    logLevel,\n    noScrollBars,\n    removeElements,\n    toolBarShadowPadding,\n  } = options;\n  const addressBarPadding = getAddressBarShadowPadding({\n    platformName,\n    browserName,\n    nativeWebScreenshot,\n    addressBarShadowPadding,\n    addShadowPadding,\n  });\n  const toolBarPadding = getToolBarShadowPadding({ platformName, browserName, toolBarShadowPadding, addShadowPadding });\n\n  // Hide the scrollbars\n  if (noScrollBars) {\n    await executor(hideScrollBars, noScrollBars);\n  }\n\n  // Hide and or Remove elements\n  if (hideElements.length > 0 || removeElements.length > 0) {\n    try {\n      await executor(hideRemoveElements, { hide: hideElements, remove: removeElements }, true);\n    } catch (e) {\n      if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n        console.log(\n          '\\x1b[33m%s\\x1b[0m',\n          `\n#####################################################################################\n WARNING:\n (One of) the elements that needed to be hidden or removed could not be found on the\n page and caused this error\n Error: ${e}\n We made sure the test didn't break.\n#####################################################################################\n`,\n        );\n      }\n    }\n  }\n\n  // Set some custom css\n  if (disableCSSAnimation || checkIsMobile(platformName)) {\n    await executor(setCustomCss, { addressBarPadding, disableCSSAnimation, id: CUSTOM_CSS_ID, toolBarPadding });\n    // Wait at least 500 milliseconds to make sure the css is applied\n    // Not every device is fast enough to apply the css faster\n    await waitFor(500);\n  }\n\n  // Get all the needed instance data\n  const instanceOptions = {\n    addressBarShadowPadding: options.addressBarShadowPadding,\n    toolBarShadowPadding: options.toolBarShadowPadding,\n    ...options.instanceData,\n  };\n\n  return getEnrichedInstanceData(executor, instanceOptions, addShadowPadding);\n}\n"]}